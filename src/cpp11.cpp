// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// CartesianContainer.cpp
SEXP ComboGridCpp(cpp11::list RList, bool IsRep);
extern "C" SEXP _RcppAlgos_ComboGridCpp(SEXP RList, SEXP IsRep) {
  BEGIN_CPP11
    return cpp11::as_sexp(ComboGridCpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(RList), cpp11::as_cpp<cpp11::decay_t<bool>>(IsRep)));
  END_CPP11
}
// CheckReturn.cpp
SEXP CheckConstrndCpp(SEXP RCnstrntFun, SEXP RCompFun, SEXP Rtarget);
extern "C" SEXP _RcppAlgos_CheckConstrndCpp(SEXP RCnstrntFun, SEXP RCompFun, SEXP Rtarget) {
  BEGIN_CPP11
    return cpp11::as_sexp(CheckConstrndCpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(RCnstrntFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RCompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget)));
  END_CPP11
}
// CheckReturn.cpp
SEXP CheckReturn(SEXP Rv, SEXP RCnstrntFun, SEXP RCompFun, SEXP Rtarget, SEXP RKeepRes, SEXP stdFun);
extern "C" SEXP _RcppAlgos_CheckReturn(SEXP Rv, SEXP RCnstrntFun, SEXP RCompFun, SEXP Rtarget, SEXP RKeepRes, SEXP stdFun) {
  BEGIN_CPP11
    return cpp11::as_sexp(CheckReturn(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RCnstrntFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RCompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RKeepRes), cpp11::as_cpp<cpp11::decay_t<SEXP>>(stdFun)));
  END_CPP11
}
// CombinatoricsApply.cpp
SEXP CombinatoricsApply(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP stdFun, SEXP myEnv, SEXP RFunVal, SEXP RIsComb);
extern "C" SEXP _RcppAlgos_CombinatoricsApply(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP stdFun, SEXP myEnv, SEXP RFunVal, SEXP RIsComb) {
  BEGIN_CPP11
    return cpp11::as_sexp(CombinatoricsApply(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rlow), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rhigh), cpp11::as_cpp<cpp11::decay_t<SEXP>>(stdFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(myEnv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFunVal), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb)));
  END_CPP11
}
// CombinatoricsCount.cpp
SEXP CombinatoricsCount(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RIsComb);
extern "C" SEXP _RcppAlgos_CombinatoricsCount(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RIsComb) {
  BEGIN_CPP11
    return cpp11::as_sexp(CombinatoricsCount(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb)));
  END_CPP11
}
// CombinatoricsCount.cpp
SEXP PartitionsCount(SEXP Rtarget, SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RcompFun, SEXP Rlow, SEXP Rtolerance, SEXP RPartDesign, SEXP Rshow, SEXP RIsComposition, SEXP RIsWeak);
extern "C" SEXP _RcppAlgos_PartitionsCount(SEXP Rtarget, SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RcompFun, SEXP Rlow, SEXP Rtolerance, SEXP RPartDesign, SEXP Rshow, SEXP RIsComposition, SEXP RIsWeak) {
  BEGIN_CPP11
    return cpp11::as_sexp(PartitionsCount(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RcompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rlow), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtolerance), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RPartDesign), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rshow), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComposition), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsWeak)));
  END_CPP11
}
// CombinatoricsCount.cpp
SEXP ComboGroupsCountCpp(SEXP Rv, SEXP RNumGroups, SEXP RGrpSize);
extern "C" SEXP _RcppAlgos_ComboGroupsCountCpp(SEXP Rv, SEXP RNumGroups, SEXP RGrpSize) {
  BEGIN_CPP11
    return cpp11::as_sexp(ComboGroupsCountCpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumGroups), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RGrpSize)));
  END_CPP11
}
// CombinatoricsMain.cpp
SEXP CombinatoricsStndrd(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP Rparallel, SEXP RNumThreads, SEXP RmaxThreads, SEXP RIsComb);
extern "C" SEXP _RcppAlgos_CombinatoricsStndrd(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP Rparallel, SEXP RNumThreads, SEXP RmaxThreads, SEXP RIsComb) {
  BEGIN_CPP11
    return cpp11::as_sexp(CombinatoricsStndrd(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rlow), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rhigh), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rparallel), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb)));
  END_CPP11
}
// ComboGroups.cpp
SEXP ComboGroupsCpp(SEXP Rv, SEXP RNumGroups, SEXP RGrpSize, SEXP RRetType, SEXP Rlow, SEXP Rhigh, SEXP Rparallel, SEXP RNumThreads, SEXP RmaxThreads, SEXP RIsSample, SEXP RindexVec, SEXP RmySeed, SEXP RNumSamp, SEXP baseSample, SEXP RNamed, SEXP myEnv);
extern "C" SEXP _RcppAlgos_ComboGroupsCpp(SEXP Rv, SEXP RNumGroups, SEXP RGrpSize, SEXP RRetType, SEXP Rlow, SEXP Rhigh, SEXP Rparallel, SEXP RNumThreads, SEXP RmaxThreads, SEXP RIsSample, SEXP RindexVec, SEXP RmySeed, SEXP RNumSamp, SEXP baseSample, SEXP RNamed, SEXP myEnv) {
  BEGIN_CPP11
    return cpp11::as_sexp(ComboGroupsCpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumGroups), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RGrpSize), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RRetType), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rlow), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rhigh), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rparallel), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsSample), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RindexVec), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmySeed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumSamp), cpp11::as_cpp<cpp11::decay_t<SEXP>>(baseSample), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNamed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(myEnv)));
  END_CPP11
}
// ConstraintsMain.cpp
SEXP CombinatoricsCnstrt(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP RmainFun, SEXP RcompFun, SEXP Rtarget, SEXP RIsComb, SEXP RKeepRes, SEXP Rparallel, SEXP RnThreads, SEXP RmaxThreads, SEXP Rtolerance, SEXP RIsComposition, SEXP RIsWeak);
extern "C" SEXP _RcppAlgos_CombinatoricsCnstrt(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP RmainFun, SEXP RcompFun, SEXP Rtarget, SEXP RIsComb, SEXP RKeepRes, SEXP Rparallel, SEXP RnThreads, SEXP RmaxThreads, SEXP Rtolerance, SEXP RIsComposition, SEXP RIsWeak) {
  BEGIN_CPP11
    return cpp11::as_sexp(CombinatoricsCnstrt(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rlow), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rhigh), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmainFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RcompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RKeepRes), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rparallel), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RnThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtolerance), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComposition), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsWeak)));
  END_CPP11
}
// DivNumSieve.cpp
SEXP DivNumSieveCpp(SEXP Rb1, SEXP Rb2, SEXP RbDivSieve, SEXP RisNamed, SEXP RNumThreads, SEXP RmaxThreads);
extern "C" SEXP _RcppAlgos_DivNumSieveCpp(SEXP Rb1, SEXP Rb2, SEXP RbDivSieve, SEXP RisNamed, SEXP RNumThreads, SEXP RmaxThreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(DivNumSieveCpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rb1), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rb2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RbDivSieve), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisNamed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads)));
  END_CPP11
}
// ExposeClass.cpp
SEXP CombClassNew(SEXP RVals, SEXP RboolVec, SEXP freqInfo, SEXP Rparallel, SEXP RstdFun, SEXP Rrho, SEXP R_RFunVal, SEXP RmainFun, SEXP RcompFun, SEXP Rtarget, SEXP RKeepRes, SEXP Rtolerance, SEXP RmIsNull, SEXP RretVal);
extern "C" SEXP _RcppAlgos_CombClassNew(SEXP RVals, SEXP RboolVec, SEXP freqInfo, SEXP Rparallel, SEXP RstdFun, SEXP Rrho, SEXP R_RFunVal, SEXP RmainFun, SEXP RcompFun, SEXP Rtarget, SEXP RKeepRes, SEXP Rtolerance, SEXP RmIsNull, SEXP RretVal) {
  BEGIN_CPP11
    return cpp11::as_sexp(CombClassNew(cpp11::as_cpp<cpp11::decay_t<SEXP>>(RVals), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RboolVec), cpp11::as_cpp<cpp11::decay_t<SEXP>>(freqInfo), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rparallel), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RstdFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rrho), cpp11::as_cpp<cpp11::decay_t<SEXP>>(R_RFunVal), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmainFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RcompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RKeepRes), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtolerance), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmIsNull), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RretVal)));
  END_CPP11
}
// ExposeClass.cpp
SEXP StartOverGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_StartOverGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(StartOverGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP NextCombGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_NextCombGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(NextCombGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP NextNumCombGlue(SEXP ext, SEXP Rnum);
extern "C" SEXP _RcppAlgos_NextNumCombGlue(SEXP ext, SEXP Rnum) {
  BEGIN_CPP11
    return cpp11::as_sexp(NextNumCombGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rnum)));
  END_CPP11
}
// ExposeClass.cpp
SEXP NextGatherGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_NextGatherGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(NextGatherGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP PrevCombGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_PrevCombGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(PrevCombGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP PrevNumCombGlue(SEXP ext, SEXP Rnum);
extern "C" SEXP _RcppAlgos_PrevNumCombGlue(SEXP ext, SEXP Rnum) {
  BEGIN_CPP11
    return cpp11::as_sexp(PrevNumCombGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rnum)));
  END_CPP11
}
// ExposeClass.cpp
SEXP PrevGatherGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_PrevGatherGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(PrevGatherGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP CurrCombGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_CurrCombGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(CurrCombGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP RandomAccessGlue(SEXP ext, SEXP RIndexVec);
extern "C" SEXP _RcppAlgos_RandomAccessGlue(SEXP ext, SEXP RIndexVec) {
  BEGIN_CPP11
    return cpp11::as_sexp(RandomAccessGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIndexVec)));
  END_CPP11
}
// ExposeClass.cpp
SEXP SourceVectorGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_SourceVectorGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(SourceVectorGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP FrontGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_FrontGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(FrontGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP BackGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_BackGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(BackGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// ExposeClass.cpp
SEXP SummaryGlue(SEXP ext);
extern "C" SEXP _RcppAlgos_SummaryGlue(SEXP ext) {
  BEGIN_CPP11
    return cpp11::as_sexp(SummaryGlue(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ext)));
  END_CPP11
}
// GetClassVals.cpp
SEXP GetClassVals(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RIsComb, SEXP stdFun, SEXP RThreads, SEXP RmaxThreads, SEXP RIsCnstrd, SEXP RIsComposition, SEXP RIsWeak, SEXP RNumGroups, SEXP RGrpSize, SEXP RRetType);
extern "C" SEXP _RcppAlgos_GetClassVals(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RIsComb, SEXP stdFun, SEXP RThreads, SEXP RmaxThreads, SEXP RIsCnstrd, SEXP RIsComposition, SEXP RIsWeak, SEXP RNumGroups, SEXP RGrpSize, SEXP RRetType) {
  BEGIN_CPP11
    return cpp11::as_sexp(GetClassVals(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb), cpp11::as_cpp<cpp11::decay_t<SEXP>>(stdFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsCnstrd), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComposition), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsWeak), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumGroups), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RGrpSize), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RRetType)));
  END_CPP11
}
// MotleyPrimes.cpp
SEXP MotleyContainer(SEXP Rb1, SEXP Rb2, SEXP RIsEuler, SEXP RNamed, SEXP RNumThreads, SEXP RmaxThreads);
extern "C" SEXP _RcppAlgos_MotleyContainer(SEXP Rb1, SEXP Rb2, SEXP RIsEuler, SEXP RNamed, SEXP RNumThreads, SEXP RmaxThreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(MotleyContainer(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rb1), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rb2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsEuler), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNamed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads)));
  END_CPP11
}
// NumThreads.cpp
SEXP cpp11GetNumThreads();
extern "C" SEXP _RcppAlgos_cpp11GetNumThreads() {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp11GetNumThreads());
  END_CPP11
}
// PollardRhoContainer.cpp
SEXP PollardRhoContainer(SEXP Rv, SEXP RNamed, SEXP RbPrimeFacs, SEXP RbAllFacs, SEXP RNumThreads, SEXP RmaxThreads);
extern "C" SEXP _RcppAlgos_PollardRhoContainer(SEXP Rv, SEXP RNamed, SEXP RbPrimeFacs, SEXP RbAllFacs, SEXP RNumThreads, SEXP RmaxThreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(PollardRhoContainer(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNamed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RbPrimeFacs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RbAllFacs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads)));
  END_CPP11
}
// PrimeCount.cpp
SEXP PrimeCountCpp(SEXP Rn, SEXP RNumThreads, SEXP RmaxThreads);
extern "C" SEXP _RcppAlgos_PrimeCountCpp(SEXP Rn, SEXP RNumThreads, SEXP RmaxThreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(PrimeCountCpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rn), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads)));
  END_CPP11
}
// PrimeSieve.cpp
SEXP PrimeSieveCpp(SEXP Rb1, SEXP Rb2, SEXP RNumThreads, SEXP RmaxCores, SEXP RmaxThreads);
extern "C" SEXP _RcppAlgos_PrimeSieveCpp(SEXP Rb1, SEXP Rb2, SEXP RNumThreads, SEXP RmaxCores, SEXP RmaxThreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(PrimeSieveCpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rb1), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rb2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxCores), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads)));
  END_CPP11
}
// RankCombPermMain.cpp
SEXP RankCombPerm(SEXP RIdx, SEXP Rv, SEXP RisRep, SEXP RFreqs, SEXP Rm, SEXP RIsComb);
extern "C" SEXP _RcppAlgos_RankCombPerm(SEXP RIdx, SEXP Rv, SEXP RisRep, SEXP RFreqs, SEXP Rm, SEXP RIsComb) {
  BEGIN_CPP11
    return cpp11::as_sexp(RankCombPerm(cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIdx), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb)));
  END_CPP11
}
// RankPartitionMain.cpp
SEXP RankPartitionMain(SEXP RIdx, SEXP Rv, SEXP RisRep, SEXP RFreqs, SEXP Rm, SEXP RcompFun, SEXP Rtarget, SEXP Rtolerance, SEXP RIsComposition, SEXP RIsWeak);
extern "C" SEXP _RcppAlgos_RankPartitionMain(SEXP RIdx, SEXP Rv, SEXP RisRep, SEXP RFreqs, SEXP Rm, SEXP RcompFun, SEXP Rtarget, SEXP Rtolerance, SEXP RIsComposition, SEXP RIsWeak) {
  BEGIN_CPP11
    return cpp11::as_sexp(RankPartitionMain(cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIdx), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RcompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtolerance), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComposition), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsWeak)));
  END_CPP11
}
// SampleCombPerm.cpp
SEXP SampleCombPerm(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RindexVec, SEXP RIsComb, SEXP RmySeed, SEXP RNumSamp, SEXP baseSample, SEXP stdFun, SEXP myEnv, SEXP Rparallel, SEXP RNumThreads, SEXP RmaxThreads, SEXP RNamed, SEXP RFunVal);
extern "C" SEXP _RcppAlgos_SampleCombPerm(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RindexVec, SEXP RIsComb, SEXP RmySeed, SEXP RNumSamp, SEXP baseSample, SEXP stdFun, SEXP myEnv, SEXP Rparallel, SEXP RNumThreads, SEXP RmaxThreads, SEXP RNamed, SEXP RFunVal) {
  BEGIN_CPP11
    return cpp11::as_sexp(SampleCombPerm(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RindexVec), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComb), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmySeed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumSamp), cpp11::as_cpp<cpp11::decay_t<SEXP>>(baseSample), cpp11::as_cpp<cpp11::decay_t<SEXP>>(stdFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(myEnv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rparallel), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNamed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFunVal)));
  END_CPP11
}
// SamplePartitions.cpp
SEXP SamplePartitions(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RindexVec, SEXP RmySeed, SEXP RNumSamp, SEXP baseSample, SEXP RNumThreads, SEXP RmaxThreads, SEXP RNamed, SEXP RcompFun, SEXP Rtarget, SEXP myEnv, SEXP RIsComposition, SEXP RIsWeak);
extern "C" SEXP _RcppAlgos_SamplePartitions(SEXP Rv, SEXP Rm, SEXP RisRep, SEXP RFreqs, SEXP RindexVec, SEXP RmySeed, SEXP RNumSamp, SEXP baseSample, SEXP RNumThreads, SEXP RmaxThreads, SEXP RNamed, SEXP RcompFun, SEXP Rtarget, SEXP myEnv, SEXP RIsComposition, SEXP RIsWeak) {
  BEGIN_CPP11
    return cpp11::as_sexp(SamplePartitions(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rm), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RisRep), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RFreqs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RindexVec), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmySeed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumSamp), cpp11::as_cpp<cpp11::decay_t<SEXP>>(baseSample), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNumThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RmaxThreads), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RNamed), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RcompFun), cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rtarget), cpp11::as_cpp<cpp11::decay_t<SEXP>>(myEnv), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsComposition), cpp11::as_cpp<cpp11::decay_t<SEXP>>(RIsWeak)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_RcppAlgos_BackGlue",            (DL_FUNC) &_RcppAlgos_BackGlue,             1},
    {"_RcppAlgos_CheckConstrndCpp",    (DL_FUNC) &_RcppAlgos_CheckConstrndCpp,     3},
    {"_RcppAlgos_CheckReturn",         (DL_FUNC) &_RcppAlgos_CheckReturn,          6},
    {"_RcppAlgos_CombClassNew",        (DL_FUNC) &_RcppAlgos_CombClassNew,        14},
    {"_RcppAlgos_CombinatoricsApply",  (DL_FUNC) &_RcppAlgos_CombinatoricsApply,  10},
    {"_RcppAlgos_CombinatoricsCnstrt", (DL_FUNC) &_RcppAlgos_CombinatoricsCnstrt, 17},
    {"_RcppAlgos_CombinatoricsCount",  (DL_FUNC) &_RcppAlgos_CombinatoricsCount,   5},
    {"_RcppAlgos_CombinatoricsStndrd", (DL_FUNC) &_RcppAlgos_CombinatoricsStndrd, 10},
    {"_RcppAlgos_ComboGridCpp",        (DL_FUNC) &_RcppAlgos_ComboGridCpp,         2},
    {"_RcppAlgos_ComboGroupsCountCpp", (DL_FUNC) &_RcppAlgos_ComboGroupsCountCpp,  3},
    {"_RcppAlgos_ComboGroupsCpp",      (DL_FUNC) &_RcppAlgos_ComboGroupsCpp,      16},
    {"_RcppAlgos_CurrCombGlue",        (DL_FUNC) &_RcppAlgos_CurrCombGlue,         1},
    {"_RcppAlgos_DivNumSieveCpp",      (DL_FUNC) &_RcppAlgos_DivNumSieveCpp,       6},
    {"_RcppAlgos_FrontGlue",           (DL_FUNC) &_RcppAlgos_FrontGlue,            1},
    {"_RcppAlgos_GetClassVals",        (DL_FUNC) &_RcppAlgos_GetClassVals,        14},
    {"_RcppAlgos_MotleyContainer",     (DL_FUNC) &_RcppAlgos_MotleyContainer,      6},
    {"_RcppAlgos_NextCombGlue",        (DL_FUNC) &_RcppAlgos_NextCombGlue,         1},
    {"_RcppAlgos_NextGatherGlue",      (DL_FUNC) &_RcppAlgos_NextGatherGlue,       1},
    {"_RcppAlgos_NextNumCombGlue",     (DL_FUNC) &_RcppAlgos_NextNumCombGlue,      2},
    {"_RcppAlgos_PartitionsCount",     (DL_FUNC) &_RcppAlgos_PartitionsCount,     12},
    {"_RcppAlgos_PollardRhoContainer", (DL_FUNC) &_RcppAlgos_PollardRhoContainer,  6},
    {"_RcppAlgos_PrevCombGlue",        (DL_FUNC) &_RcppAlgos_PrevCombGlue,         1},
    {"_RcppAlgos_PrevGatherGlue",      (DL_FUNC) &_RcppAlgos_PrevGatherGlue,       1},
    {"_RcppAlgos_PrevNumCombGlue",     (DL_FUNC) &_RcppAlgos_PrevNumCombGlue,      2},
    {"_RcppAlgos_PrimeCountCpp",       (DL_FUNC) &_RcppAlgos_PrimeCountCpp,        3},
    {"_RcppAlgos_PrimeSieveCpp",       (DL_FUNC) &_RcppAlgos_PrimeSieveCpp,        5},
    {"_RcppAlgos_RandomAccessGlue",    (DL_FUNC) &_RcppAlgos_RandomAccessGlue,     2},
    {"_RcppAlgos_RankCombPerm",        (DL_FUNC) &_RcppAlgos_RankCombPerm,         6},
    {"_RcppAlgos_RankPartitionMain",   (DL_FUNC) &_RcppAlgos_RankPartitionMain,   10},
    {"_RcppAlgos_SampleCombPerm",      (DL_FUNC) &_RcppAlgos_SampleCombPerm,      16},
    {"_RcppAlgos_SamplePartitions",    (DL_FUNC) &_RcppAlgos_SamplePartitions,    16},
    {"_RcppAlgos_SourceVectorGlue",    (DL_FUNC) &_RcppAlgos_SourceVectorGlue,     1},
    {"_RcppAlgos_StartOverGlue",       (DL_FUNC) &_RcppAlgos_StartOverGlue,        1},
    {"_RcppAlgos_SummaryGlue",         (DL_FUNC) &_RcppAlgos_SummaryGlue,          1},
    {"_RcppAlgos_cpp11GetNumThreads",  (DL_FUNC) &_RcppAlgos_cpp11GetNumThreads,   0},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_RcppAlgos(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
